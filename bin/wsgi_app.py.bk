#!usr/bin/env python
from exception.excp_mod import *
import ConfigParser
from excu_midw_mod import extor_parser 
import os
import copy
status = '200 OK' # HTTP Status  
headers = [('Content-type', 'text/html')] # HTTP Headers
#class Wsgi__Apps(Object):
def init_router(router):
	@router.add_route('con_req')
	def con_response(environ, start_response):
		start_response(status, headers)
		try:
			file_path= get_file_path(environ['PATH_INFO'])
		except SCException,e:
			return e.errorhandler()
		try:
			xhtml=open('../'+file_path).read()
		except IOError:
			#xhtml = open ('../page/errorpage.html').read()
			xhtml = errorpagehandler()
		return xhtml
	@router.add_route('hd_req')
	def hd_response(environ, start_response):
		response_headers=copy.deepcopy(headers)
		try:
			svc_path = get_file_path(environ['PATH_INFO'])
			excutor = excutor_parser(svc_path)
			try:
				request_body_size = int(environ.get('CONTENT_LENGTH',0))
			except ValueError:
				request_body_size=0
			request_body = environ['wsgi.input'].read(request_body_size)
			response_body = os.popen(excutor+' ../'+svc_path+' '+request_body).readlines()
			#response_headers.append(('Content-Length', str(len(response_body))))
		except SCException,e:
			response_body= e.errorhandler()
		except:
			response_body='unkown error'
		#headers.append(('Content-Length', str(len(response_body))))
		#return "the args is:"+request_body
		start_response(status,response_headers)
		return response_body
#def excute_javaprocess(environ,start_response):
	@router.add_route('/calsv')
	def upload_handling(environ,start_response):
		wenput=en["wsgi.input"]
		params=cgi.FieldStorage(fp=io.StringIO(winput.read(int(env.get("CONTENT_LENGTH","0"))).decode("ISO-8859-1")),environ=env,keep_blank_values=1)
		print(params["file"].name)  
		print(params["file"].filename.encode("ISO-8859-1").decode("UTF-8"))
		print(params["file"].value.encode("ISO-8859-1"))
		start_response(status, headers)
		return "upload file successfully!!!"
def get_file_path(req_path):
	if '.' not in req_path.split('/')[-1]:
		raise ErrorURLException()
	if req_path[1]=='/' or req_path[1:2]=='..':
		if req_path.split('/')[-1].split('.')[-1] in config.get("REQTYPE","conreq").split(','):
			raise NoPageException()
		else:
			raise ErrorURLException()
	return req_path[1:]
def excutor_parser(sv_path):
	excutor = sv_path.split('/')[-1].split('.')[-1]
	if excutor not in config.get("EXECUTOR","excutor").split(','):
		raise NoExcutorException()
	return config.get("EXECUTOR",excutor)
